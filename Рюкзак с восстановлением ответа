void Bag() {
    int n, w;
    cin >> n >> w;
    vi a(n);
    vi c(n);
    for (int i = 0; i < n; ++i) {
		cin >> a[i] >> c[i];
	}
    vvi dp(n + 1, vi (w + 1));
    for (int i = 1; i <= n; ++i) {
        for (int j = 0; j <= w; ++j) {
            if (j >= a[i - 1]) {
                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - a[i - 1]] + c[i - 1]);
            } else {
                dp[i][j] = dp[i - 1][j];
            }
        }
    }
    stack<int> st;
    int ptr = n, ptr2 = max_element(dp[n].begin(), dp[n].end()) - dp[n].begin();
    while (ptr2 > 0 && ptr > 0) {
        if (dp[ptr - 1][ptr2] != dp[ptr][ptr2]) {
            st.push(ptr);
            --ptr;
            ptr2 -= a[ptr];
        } else {
            --ptr;
        }
    }
    while (!st.empty()) {
        cout << st.top() << ' ';
        st.pop();
    }
    cout << endl;
}
